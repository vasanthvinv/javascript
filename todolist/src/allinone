import React, { useState } from "react";
import "./App.css";

const Input: React.FC<{
  data: string[];
  setData: React.Dispatch<React.SetStateAction<string[]>>;
  currentValue: string;
  setCurrentValue: React.Dispatch<React.SetStateAction<string>>;
}> = ({ data, setData, currentValue, setCurrentValue }) => {
  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setCurrentValue(event.target.value);
  };

  const handleAdd = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === "Enter" && currentValue.trim()) {
      setData([...data, currentValue.trim()]);
      setCurrentValue("");
    }
  };

  return (
    <div className="inputs">
      <input
        placeholder="What needs to be done?"
        value={currentValue}
        onChange={handleChange}
        onKeyDown={handleAdd}
      />
    </div>
  );
};

const List: React.FC<{
  data: string[];
  all: boolean;
  active: boolean;
  completed: boolean;
  datas: string[];
  setDatas: React.Dispatch<React.SetStateAction<string[]>>;
}> = ({ data, all, active, completed, datas, setDatas }) => {
  const handleChange = (item: string) => {
    setDatas((prev) =>
      prev.includes(item) ? prev.filter((i) => i !== item) : [...prev, item]
    );
  };

  const filteredData = data.filter((item) => {
    if (all) return true;
    if (active) return !datas.includes(item);
    if (completed) return datas.includes(item);
    return false;
  });

  return (
    <div>
      {filteredData.map((item, i) => (
        <div key={i}>
          <input
            type="checkbox"
            checked={datas.includes(item)}
            onChange={() => handleChange(item)}
          />
          <span>{item}</span>
          <button
            onClick={() => setDatas((prev) => prev.filter((i) => i !== item))}
          >
            X
          </button>
        </div>
      ))}
    </div>
  );
};

const Details: React.FC<{
  data: string[];
  datas: string[];
  handleAll: () => void;
  handleActive: () => void;
  handleCompleted: () => void;
}> = ({ data, datas, handleAll, handleActive, handleCompleted }) => {
  return (
    <div>
      <span>{data.length - datas.length} item left!</span>
      <span>
        <button onClick={handleAll}>All</button>
        <button onClick={handleActive}>Active</button>
        <button onClick={handleCompleted}>Completed</button>
      </span>
      <button>Clear completed</button>
    </div>
  );
};

const App: React.FC = () => {
  const [data, setData] = useState<string[]>([]);
  const [currentValue, setCurrentValue] = useState("");
  const [all, setAll] = useState(true);
  const [active, setActive] = useState(false);
  const [completed, setCompleted] = useState(false);
  const [datas, setDatas] = useState<string[]>([]);

  const handleAll = () => {
    setAll(true);
    setActive(false);
    setCompleted(false);
  };

  const handleActive = () => {
    setAll(false);
    setActive(true);
    setCompleted(false);
  };

  const handleCompleted = () => {
    setAll(false);
    setActive(false);
    setCompleted(true);
  };

  return (
    <div className="App">
      <h2>todos</h2>
      <Input
        data={data}
        setData={setData}
        currentValue={currentValue}
        setCurrentValue={setCurrentValue}
      />
      <List
        data={data}
        datas={datas}
        setDatas={setDatas}
        all={all}
        active={active}
        completed={completed}
      />
      <Details
        data={data}
        datas={datas}
        handleAll={handleAll}
        handleActive={handleActive}
        handleCompleted={handleCompleted}
      />
    </div>
  );
};

export default App;


import React, { useReducer, useState } from 'react';
import './App.css';



type Action =
| { type: 'Set_Add'; payload: string }
| { type: 'Set_Change'; payload: string }
| { type: 'Set_Delete'; payload: string }
| { type: 'Set_Filter'; payload: 'all' | 'active' | 'completed' }
| { type: 'Set_Completed' };

interface Todo {
data: string;
completed: boolean;
}

interface State {
todos: Todo[];
filter: 'all' | 'active' | 'completed';
}


const initialState: State = {
todos: [],
filter: 'all',
};


 const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'Set_Add':
      return {
        ...state,
        todos: [
          ...state.todos,
          { data: action.payload, completed: false },
        ],
      };
    case 'Set_Change':
      return {
        ...state,
        todos: state.todos.map(todo =>
          todo.data === action.payload
            ? { ...todo, completed: !todo.completed }
            : todo
        ),
      };
    case 'Set_Delete':
      return {
        ...state,
        todos: state.todos.filter(todo => todo.data !== action.payload),
      };
    case 'Set_Filter':
      return {
        ...state,
        filter: action.payload,
      };
    case 'Set_Completed':
      return {
        ...state,
        todos: state.todos.filter(todo => !todo.completed),
      };
    default:
      return state;
  }
};

const Main = () => {
  const [state, dispatch] = useReducer(reducer, initialState);
  const [currentValue, setCurrentValue] = useState<string>('');

  const SetChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setCurrentValue(event.target.value);
  };

  const SetAdd = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === 'Enter') {
      dispatch({ type: 'Set_Add', payload: currentValue });
      setCurrentValue('');
    }
  };

  const SetTodoChange = (item: Todo) => {
    dispatch({ type: 'Set_Change', payload: item.data });
  };

  const SetDelete = (item: Todo) => {
    dispatch({ type: 'Set_Delete', payload: item.data });
  };

  const SetFilterChange = (filter: 'all' | 'active' | 'completed') => {
    dispatch({ type: 'Set_Filter', payload: filter });
  };

  const filteredData = state.todos.filter(item => {
    if (state.filter === 'all') return true;
    if (state.filter === 'active') return !item.completed;
    if (state.filter === 'completed') return item.completed;
    return false;
  });

  const activeCount = state.todos.filter(item => !item.completed).length;

  return (
    <div className="Main">
      <h2>todos</h2>
      <div className="inputs">
        <input
          placeholder="What needs to be done?"
          value={currentValue}
          onChange={SetChange}
          onKeyDown={SetAdd}
        />
      </div>
      <div>
        {filteredData.map((item, i) => (
          <div key={i}>
            <input
              type="checkbox"
              checked={item.completed}
              onChange={() => SetTodoChange(item)}
            />
            <span>{item.data}</span>
            <button onClick={() => SetDelete(item)}>X</button>
          </div>
        ))}
      </div>
      <div>
        <span>{activeCount} item left!</span>
        <span>
          <button onClick={() => SetFilterChange('all')}>All</button>
          <button onClick={() => SetFilterChange('active')}>Active</button>
          <button onClick={() => SetFilterChange('completed')}>Completed</button>
        </span>
        <button onClick={() => dispatch({ type: 'Set_Completed' })}>
          Clear completed
        </button>
      </div>
    </div>
  );
};

export default Main;





 // const filteredData = state.todos.filter((item) => {
  //   if (state.filter === "all") return true;
  //   if (state.filter === "active") return !item.completed;
  //   if (state.filter === "completed") return item.completed;
  //   return false;
  // });

  // const activeCount = state.todos.filter((item) => !item.completed).length;
  
      {/* <Input
        currentValue={currentValue}
        SetChange={SetChange}
        SetAdd={SetAdd}
      />
      <ListDetail
        Set_Filtered_Data={Set_Filtered_Data}
        SetTodoChange={SetTodoChange}
        SetDelete={SetDelete}
      />
      <Footer
        Set_Active_Count={Set_Active_Count}
        onFilterChange={SetFilterChange}
        Set_Completed={Set_Completed}
      /> */}